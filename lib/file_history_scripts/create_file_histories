#!/usr/bin/env ruby
require 'io/wait'

class ActivityTrackerManager
  def initialize
    @records = []
    @trackers = []
  end

  def add_tracker(tracker)
    @trackers << tracker
    self
  end

  def get_record
    @trackers.each { |t| @records << t.get_record if t.ready? }
    @records.sort!.shift
  end

  def wait_for_ready
    begin
      IO.select(@trackers.map(&:io))
    end while !ready?
  end

  def ready?
    @records.present? || @trackers.any?(&:ready?)
  end

  def stop_track
    @trackers.each(&:stop_track)
  end
end

class ActivityTracker
  attr_reader :io
  def initialize
    @io = exec_cmd
  end

  def get_record
    factory_class.new(@io.gets)
  end

  def ready?
    @io.ready?
  end

  def stop_track
    system "kill -9 #{@io.pid}"
  end

  def self.create(tracker_types)
    tracker_type = tracker_types.shift
    case tracker_type
    when :file_open
      tracker = FileOpenTracker
    when :file_close
      tracker = FileCloseTracker
    when :focus_change
      tracker = FocusChangeTracker
    when :accept_path_filter
      tracker = AcceptPathFilter
    when :ignore_path_filter
      tracker = IgnorePathFilter
    when :accept_name_filter
      tracker = AcceptNameFilter
    when :ignore_name_filter
      tracker = IgnoreNameFilter
    else
      fail 'Unknown Tracker type'
    end
    tracker_types.empty? ? tracker.new : tracker.new(create(tracker_types))
  end
end

class FileOpenTracker < ActivityTracker
  def exec_cmd
    IO.popen("sudo #{Rails.root}/lib/file_history_scripts/track_file_open")
  end

  def factory_class
    FileOpenRecord
  end
end

class FileCloseTracker < ActivityTracker
  def exec_cmd
    IO.popen("sudo #{Rails.root}/lib/file_history_scripts/track_file_close")
  end

  def factory_class
    FileCloseRecord
  end
end

class FocusChangeTracker < ActivityTracker
  def exec_cmd
    IO.popen("#{Rails.root}/lib/file_history_scripts/track_focus_change")
  end

  def factory_class
    FocusChangeRecord
  end
end

class ActivityTrackerDecorator < ActivityTracker
  def initialize(tracker)
    @tracker = tracker
    @record = nil
    self
  end

  def io
    @tracker.io
  end

  def get_record
    record = @record
    @record = nil
    record
  end

  def ready?
    return true if @record
    return false unless @tracker.ready?
    @record = filter_record(@tracker.get_record)
    !!@record
  end

  def stop_track
    @tracker.stop_track
  end
end

class AcceptPathFilter < ActivityTrackerDecorator
  def filter_record(record)
    paths = [
      "#{ENV['HOME']}"
    ]

    paths.each do |path|
      return record if /^#{path}/ =~ record.path
    end
    nil
  end
end

class IgnorePathFilter < ActivityTrackerDecorator
  def filter_record(record)
    paths = [
      "#{ENV['HOME']}/.emacs.d",
      "#{ENV['HOME']}/.CFUserTextEncoding",
      "#{ENV['HOME']}/Library"
    ]

    paths.each do |path|
      return nil if /^#{path}/ =~ record.path
    end
    record
  end
end

# Filter logs by name for evaluation.
# In m_thesis evaluation, target applications are
# "Preview" and "Excel."
class AcceptNameFilter < ActivityTrackerDecorator
  def filter_record(record)
    pnames = [
      'open'
    ]

    pnames.include?(record.pname) ? record : nil
  end
end

class IgnoreNameFilter < ActivityTrackerDecorator
  def filter_record(record)
    pnames = [
      'Dropbox',
      'parentalcontrol',
      'coreservicesd',
      'basename',
      'ps',
      'discoveryd',
      'cfprefsd',
      'TweetDeck',
      'Slack',
      'System Events',
      'grep',
      'wc',
      'sh',
      'get_number_of_f',
      'osascript',
      'taskgated',
      'launchservicesd',
      'com.apple.appki',
      'cookied',
      'AddressBookSour',
      'mtmd',
      'ruby',
      'mds',
      'mdworker',
      'trustevaluation',
      'fontworker',
      'Finder'
    ]

    pnames.include?(record.pname) ? nil : record
  end
end

class ActivityRecord
  include Comparable
  attr_reader :time, :record_type, :pid, :pname

  def parse_line(line)
    line.chomp!
    principle_record = line.split('|')
    principle_record[0] = Time.at(principle_record.first.to_i)
    principle_record
  end

  def <=>(other)
    time <=> other.time
  end

  def same_process?(other)
    pid == other.pid
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}"
  end
end

class FileOpenRecord < ActivityRecord
  attr_reader :path, :fd

  def initialize(line)
    @time, @record_type, @pid, @pname, @path, @fd = parse_line(line)
  end

  def same_path?(other)
    path == other.path
  end

  def same_fd?(other)
    fd == other.fd
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}|#{@path}|#{@fd}"
  end
end

class FileCloseRecord < ActivityRecord
  attr_reader :fd

  def initialize(line)
    @time, @record_type, @pid, @pname, @fd = parse_line(line)
  end

  def same_fd?(other)
    fd == other.fd
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}|#{@fd}"
  end
end

class FocusChangeRecord < ActivityRecord
  attr_reader :window_number

  def initialize(line)
    @time, @record_type, @pid, @pname, @window_number = parse_line(line)
  end

  def same_window?(other)
    window_number == other.window_number
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}|#{@window_number}"
  end
end

# 現在ユーザが参照してるファイルを管理するクラス
class WatchingFile
  attr_reader :time, :pid, :pname, :path, :window_number

  def initialize(h)
    @time = h[:time]
    @pid = h[:pid]
    @pname = h[:pname]
    @path = h[:path]
    @window_number = h[:window_number]
  end

  def same_process?(other)
    pid == other.pid
  end

  def same_path?(other)
    path == other.path
  end

  def same_window?(other)
    window_number == other.window_number
  end
end

# ファイルとウィンドウの対応を管理するクラス
class FileOpenedByWindow
  attr_reader :pid, :pname, :path, :window_number

  def initialize(h)
    @pid = h[:pid]
    @pname = h[:pname]
    @path = h[:path]
    @window_number = h[:window_number]
  end

  def same_process?(other)
    pid == other.pid
  end

  def same_path?(other)
    path == other.path
  end

  def same_window?(other)
    window_number == other.window_number
  end
end

class FileHistoryFactory
  def initialize
    @file_open_records = []
    @watching_files = []
    @file_opened_by_windows = []
  end

  def receive_record(record)
    case record
    when FileOpenRecord
      add_record(record)
    when FileCloseRecord
      delete_record(record)
    when FocusChangeRecord
      end_watch(record)
      start_watch(record)
    end
  end

  private

  # 同じプロセスで同じファイルパスを開いていなければ，file_open_records 配列に追加する．
  def add_record(file_open_record)
    if @file_open_records.select { |r| r.same_process?(file_open_record) && r.same_path?(file_open_record) }.empty?
      @file_open_records.push file_open_record
    end
  end

  def delete_record(file_close_record)
    @file_open_records.select! { |r| !r.same_process?(file_close_record) }
  end

  # まず，ファイルを開いてるウィンドウと同じwindow num が来たら対応するファイルをwatchingし始める
  # 評価用に，openコマンドの次にフォーカス来たAPで見始めたことにする．
  def start_watch(focus_change_record)
    # window num = 0 で Excel が開いたり開かなかったりするので，win num = 0 は弾く．
    return false if focus_change_record.window_number == '0'

    # 最前面のウィンドウで開かれているファイルを参照開始
    @watching_files += @file_opened_by_windows.select { |fobw| fobw.same_window?(focus_change_record) }.map do |fobw|
      WatchingFile.new(time:  focus_change_record.time,
                       pid:   fobw.pid,
                       pname: fobw.pname,
                       path:  fobw.path,
                       window_number: focus_change_record.window_number)
    end

    @file_open_records.each do |record|
      # openコマンドで開かれたすべてのファイルを参照開始
      watching_file = WatchingFile.new(time:  focus_change_record.time,
                                       pid:   record.pid,
                                       pname: record.pname,
                                       path:  record.path,
                                       window_number: focus_change_record.window_number)
      @watching_files.push watching_file

      # windowとの対応を作成しておく．
      file_opened_by_window = FileOpenedByWindow.new(pid:   record.pid,
                                                     pname: record.pname,
                                                     path:  record.path,
                                                     window_number: focus_change_record.window_number)
      @file_opened_by_windows.push file_opened_by_window
    end

    @file_open_records.clear # 全部今回のAPで見たことにするから消してしまう
  end

  def end_watch(focus_change_record)
    @watching_files.each do |file|
      fh = UnifiedHistory.create(
        path:         file.path,
        title:        file.path.split('/').last || file.path,
        type:         'FileHistory',
        start_time:   file.time,
        end_time:     focus_change_record.time
      )
      puts "history: #{fh.start_time}|#{fh.end_time}|#{fh.title}|#{fh.path}"
    end
    @watching_files.clear
  end
end

################################
# main
$file_open_processes_copy = []
atm = ActivityTrackerManager.new
atm.add_tracker(ActivityTracker.create([:accept_path_filter,
                                        :accept_name_filter,
                                        :ignore_path_filter,
                                        # :ignore_name_filter,
                                        :file_open]))
sleep 1
# atm.add_tracker(ActivityTracker.create([:accept_name_filter,
#                                         :ignore_name_filter,
#                                         :file_close]))
atm.add_tracker(ActivityTracker.create([:focus_change]))
fhf = FileHistoryFactory.new
loop do
  atm.wait_for_ready # blocking
  record = atm.get_record
  record.print_record
  fhf.receive_record(record)
end
