#!/usr/bin/env ruby
require 'io/wait'

class ActivityTrackerManager
  def initialize
    @records = []
    @trackers = []
  end

  def add_tracker(tracker)
    @trackers << tracker
    return self
  end

  def get_record
    @trackers.each{|t| @records << t.get_record if t.ready? }
    return @records.sort!.shift
  end

  def ready?
    return @records.present? || @trackers.any?(&:ready?)
  end

  def stop_track
    @trackers.each(&:stop_track)
  end
end

class ActivityTracker
  def initialize
    @io = exec_cmd
  end

  def get_record
    return factory_class.new(@io.gets)
  end

  def ready?
    return @io.ready?
  end

  def stop_track
    system "kill -9 #{@io.pid}"
  end

  def self.create(tracker_types)
    tracker_type = tracker_types.shift
    case tracker_type
    when :file_open
      tracker = FileOpenTracker
    when :file_close
      tracker = FileCloseTracker
    when :focus_change
      tracker = FocusChangeTracker
    when :accept_home_directory_filter
      tracker = AcceptHomeDirectoryFilter
    when :ignore_library_filter
      tracker = IgnoreLibraryFilter
    when :ignore_finder_filter
      tracker = IgnoreFinderFilter
    when :ignore_font_worker_filter
      tracker = IgnoreFontWorkerFilter
    when :ignore_truste_valuation_filter
      tracker = IgnoreTrusteValuationFilter
    when :ignore_mdworker_filter
      tracker = IgnoreMdworkerFilter
    when :ignore_mds_filter
      tracker = IgnoreMdsFilter
    when :ignore_ruby_filter
      tracker = IgnoreRubyFilter
    when :ignore_mtmd_filter
      tracker = IgnoreMtmdFilter
    when :ignore_address_book_mana_filter
      tracker = IgnoreAddressBookManaFilter
    when :ignore_address_book_sour_filter
      tracker = IgnoreAddressBookSourFilter
    when :ignore_cookied_filter
      tracker =  IgnoreCookiedFilter
    when :ignore_cfuser_text_encoding_filter
      tracker = IgnoreCFUserTextEncodingFilter
    when :ignore_com_apple_appki_filter
      tracker = IgnoreComAppleAppkiFilter
    when :ignore_emacsd_filter
      tracker = IgnoreEmacsdFilter
    when :ignore_launchservicesd_filter
      tracker = IgnoreLaunchServicesdFilter
    when :ignore_taskgated_filter
      tracker = IgnoreTaskGatedFilter
    when :ignore_get_title_of_fo_filter
      tracker = IgnoreGetTitleOfFoFilter
    when :accept_wathicng_file_filter
      tracker = AcceptWathicngFileFilter
    when :ignore_get_number_of_focused_window_filter
      tracker = IgnoreGetNumberOfFocusedWindowFilter
    else
      raise "Unknown Tracker type"
    end
    return tracker_types.empty? ? tracker.new : tracker.new(self.create(tracker_types))
  end
end

class FileOpenTracker < ActivityTracker
  def exec_cmd
    IO.popen("sudo #{Rails.root}/lib/file_history_scripts/track_file_open")
  end

  def factory_class
    FileOpenRecord
  end
end

class FileCloseTracker < ActivityTracker
  def exec_cmd
    IO.popen("sudo #{Rails.root}/lib/file_history_scripts/track_file_close")
  end

  def factory_class
    FileCloseRecord
  end
end

class FocusChangeTracker < ActivityTracker
  def exec_cmd
    IO.popen("#{Rails.root}/lib/file_history_scripts/track_focus_change")
  end

  def factory_class
    return FocusChangeRecord
  end
end

class ActivityTrackerDecorator < ActivityTracker
  def initialize(tracker)
    @tracker = tracker
    @record = nil
    return self
  end

  def get_record
    record = @record
    @record = nil
    return record
  end

  def ready?
    while @record.nil?
      if @tracker.ready?
        @record = filter_record(@tracker.get_record)
      else
        return false
      end
    end
    return true
  end

  def stop_track
    @tracker.stop_track
  end
end

class AcceptHomeDirectoryFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^#{ENV["HOME"]}/ =~ record.path ? record : nil
  end
end

class IgnoreLibraryFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^#{ENV["HOME"]}\/Library/ =~ record.path ? nil : record
  end
end

class IgnoreFinderFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^Finder$/ =~ record.pname ? nil : record
  end
end

class IgnoreFontWorkerFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^fontworker$/ =~ record.pname ? nil : record
  end
end

class IgnoreTrusteValuationFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^trustevaluation$/ =~ record.pname ? nil : record
  end
end

class IgnoreMdworkerFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^mdworker$/ =~ record.pname ? nil : record
  end
end

class IgnoreMdsFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^mds$/ =~ record.pname ? nil : record
  end
end

class IgnoreRubyFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^ruby$/ =~ record.pname ? nil : record
  end
end

class IgnoreMtmdFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^mtmd$/ =~ record.pname ? nil : record
  end
end

class IgnoreAddressBookManaFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^AddressBookMana$/ =~ record.pname ? nil : record
  end
end

class IgnoreAddressBookSourFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^AddressBookSour$/ =~ record.pname ? nil : record
  end
end

class IgnoreCookiedFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^cookied$/ =~ record.pname ? nil : record
  end
end

class IgnoreCFUserTextEncodingFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^#{ENV["HOME"]}\/\.CFUserTextEncoding$/ =~ record.path ? nil : record
  end
end

class IgnoreComAppleAppkiFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^com\.apple\.appki$/ =~ record.pname ? nil : record
  end
end

class IgnoreEmacsdFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^#{ENV["HOME"]}\/\.emacs\.d/ =~ record.path ? nil : record
  end
end

class IgnoreLaunchServicesdFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^launchservicesd/ =~ record.pname ? nil : record
  end
end

class IgnoreTaskGatedFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^taskgated/ =~ record.pname ? nil : record
  end
end

class IgnoreTaskGatedFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^taskgated/ =~ record.pname ? nil : record
  end
end

class IgnoreGetTitleOfFoFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^get_title_of_fo/ =~ record.pname ? nil : record
  end
end

class AcceptWathicngFileFilter < ActivityTrackerDecorator
  def filter_record(record)
    return $file_open_processes_copy.any?{|p| p.pname == record.pname && p.pid == record.pid && p.fd == record.fd} ? record : nil
  end
end

class IgnoreGetNumberOfFocusedWindowFilter < ActivityTrackerDecorator
  def filter_record(record)
    return /^get_number_of_f/ =~ record.pname ? nil : record
  end
end

class ActivityRecord
  include Comparable
  attr_reader :time, :record_type, :pid, :pname

  def parse_line(line)
    line.chomp!
    principle_record = line.split("|")
    principle_record[0] = Time.at(principle_record.first.to_i)
    return principle_record
  end

  def <=>(other)
    self.time <=> other.time
  end

  def same_process?(other)
    self.pid == other.pid && self.pname == other.pname
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}"
  end
end

class FileOpenRecord < ActivityRecord
  attr_reader :path, :fd

  def initialize(line)
    @time, @record_type, @pid, @pname, @path, @fd = parse_line(line)
  end

  def same_path?(other)
    self.path == other.path
  end

  def same_fd?(other)
    self.fd == other.fd
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}|#{@path}|#{@fd}"
  end
end

class FileCloseRecord < ActivityRecord
  attr_reader :fd

  def initialize(line)
    @time, @record_type, @pid, @pname, @fd = parse_line(line)
  end

  def same_fd?(other)
    self.fd == other.fd
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}|#{@fd}"
  end
end

class FocusChangeRecord < ActivityRecord
  attr_reader :window_number

  def initialize(line)
    @time, @record_type, @pid, @pname, @window_number = parse_line(line)
  end

  def same_window?(other)
    self.window_number == other.window_number
  end

  def print_record
    puts "#{@time}|#{@record_type}|#{@pid}|#{@pname}|#{@window_number}"
  end
end

class FileOpeningWindow
  attr_reader :pid, :pname, :path, :fd, :window_number

  def initialize(h)
    @pid, @pname, @path, @fd, @window_number = h[:pid], h[:pname], h[:path], h[:fd], h[:window_number]
  end

  def same_process?(other)
    self.pid == other.pid && self.pname == other.pname
  end

  def same_path?(other)
    self.path == other.path
  end

  def same_window?(other)
    self.window_number == other.window_number
  end
end

class WatchingFile
  attr_reader :time, :pid, :pname, :path, :window_number

  def initialize(h)
    @time, @pid, @pname, @path, @window_number = h[:time], h[:pid], h[:pname], h[:path], h[:window_number]
  end

  def same_process?(other)
    self.pid == other.pid && self.pname == other.pname
  end

  def same_path?(other)
    self.path == other.path
  end

  def same_window?(other)
    self.window_number == other.window_number
  end
end

class FileHistoryFactory
  def initialize
    @file_open_records = []
    @file_opening_windows = []
    @watch_files = []
    @before_focused_window_number = 0
  end

  def create_history(record)
    case record
    when FileOpenRecord
      @file_open_records << record unless aleady_open?(record)
    when FocusChangeRecord
      # Register watching files
      watching_files = @file_opening_windows.select{|w| w.same_process?(record) && w.same_window?(record)}
      watching_files.each{|file|
        @watch_files << WatchingFile.new( time:  record.time,
                                          pid:   file.pid,
                                          pname: file.pname,
                                          path:  file.path,
                                          window_number: file.window_number)
      }

      # Register Window from records stopping watching
      stop_watching_records = @file_open_records.reject{|r| r.same_process?(record)}
      @file_open_records.select!{|r| r.same_process?(record)}
      stop_watching_records.each{|r|
        @file_opening_windows << FileOpeningWindow.new( pid:   r.pid,
                                                        pname: r.pname,
                                                        path:  r.path,
                                                        fd:    r.fd,
                                                        window_number: @before_focused_window_number)
        $file_open_processes_copy = @file_opening_windows.clone
      }

      # Create FH from files and records stopping watching
      finish_watching_files = @watch_files.reject{|f| f.same_process?(record) && f.same_window?(record)}
      @watch_files.select!{|f| f.same_process?(record)}
      finish_watching_files.concat(stop_watching_records)
      finish_watching_files.each{|f|
        fh = UnifiedHistory.new( path:         f.path,
                                 title:        f.path.split("/").last || f.path,
                                 history_type: "file_history",
                                 start_time:   f.time,
                                 end_time:     record.time )
        puts "history: #{fh.start_time}|#{fh.end_time}|#{fh.title}|#{fh.path}"
      }

      @before_focused_window_number = record.window_number
    end
  end

  private
  def aleady_open?(record)
    return already_exist_same_record?(record) || already_opened_by_same_process?(record)
  end

  def already_exist_same_record?(record)
    return @file_open_records.any?{|r| r.same_path?(record) && r.same_process?(record)}
  end

  def already_opened_by_same_process?(record)
    return @file_opening_windows.any?{|p| p.same_path?(record) && p.same_process?(record)}
  end
end

################################
# main
$file_open_processes_copy = []
atm = ActivityTrackerManager.new
atm.add_tracker(ActivityTracker.create([:ignore_get_number_of_focused_window_filter,
                                        :ignore_get_title_of_fo_filter,
                                        :ignore_taskgated_filter,
                                        :ignore_launchservicesd_filter,
                                        :ignore_emacsd_filter,
                                        :ignore_com_apple_appki_filter,
                                        :ignore_cfuser_text_encoding_filter,
                                        :ignore_cookied_filter,
                                        :ignore_address_book_sour_filter,
                                        :ignore_address_book_mana_filter,
                                        :ignore_mtmd_filter,
                                        :ignore_ruby_filter,
                                        :ignore_mds_filter,
                                        :ignore_mdworker_filter,
                                        :ignore_truste_valuation_filter,
                                        :ignore_font_worker_filter,
                                        :ignore_finder_filter,
                                        :ignore_library_filter,
                                        :accept_home_directory_filter,
                                        :file_open]))
sleep 1
atm.add_tracker(ActivityTracker.create([:accept_wathicng_file_filter, :file_close]))
atm.add_tracker(ActivityTracker.create([:focus_change]))
fhf = FileHistoryFactory.new
while 1 do
  if atm.ready?
    record = atm.get_record
    record.print_record
    fhf.create_history(record)
  end
  # sleep 1 #sec
end
