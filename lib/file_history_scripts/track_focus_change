#!/usr/bin/swift

import AppKit

class WindowFocusChaser : NSObject {
  // Inheriting NSObject is required for using selecter.

  var frontmostWindowNumber: Int

  override init() {
    self.frontmostWindowNumber = 0
    super.init()
  }

  func startListening() {
    NSTimer.scheduledTimerWithTimeInterval(
      1, //sec
      target: self,
      selector: "checkFrontmostWindow",
      userInfo: nil,
      repeats: true
    )
  }

  // return frontmost window number of a application
  func getFrontmostWindowNumber() -> Int? {
    let options = CGWindowListOption(arrayLiteral: CGWindowListOption.ExcludeDesktopElements, CGWindowListOption.OptionOnScreenOnly)
    let windowListInfo = CGWindowListCopyWindowInfo(options, CGWindowID(0))
    let infoList = windowListInfo as NSArray? as? [[String: AnyObject]]

    let app = NSWorkspace.sharedWorkspace().frontmostApplication!

    // infoList is array of windowInfo. It sorted from front to back.
    // So, it is only required to get windowInfo matching first.
    for info in infoList! {
      if let ownerPID = info["kCGWindowOwnerPID"] as? Int {
        if pid_t(ownerPID) == app.processIdentifier {
          return info["kCGWindowNumber"] as? Int
        }
      }
    }

    return nil
  }

  func printFocusChangeLog() {
    let currentApp = NSWorkspace.sharedWorkspace().frontmostApplication!
    let unixtime = Int(NSDate().timeIntervalSince1970)
    let pid  = currentApp.processIdentifier
    if let name = currentApp.bundleIdentifier, number = self.getFrontmostWindowNumber() {
      print("\(unixtime)|focus_change|\(pid)|\(name)|\(number)")
    }
  }

  func checkFrontmostWindow() {
    if let currentWindowNumber = self.getFrontmostWindowNumber() {
      if self.frontmostWindowNumber != currentWindowNumber {
        self.frontmostWindowNumber = currentWindowNumber
        printFocusChangeLog()
      }
    }
  }
}

// Set standard output into line buffering mode
setlinebuf(stdout)

let wfc = WindowFocusChaser()
wfc.startListening()

// make daemon
NSRunLoop.mainRunLoop().run()
