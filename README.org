#+TITLE: README
#+DATE: <2015-09-02>
#+AUTHOR: Takuya Okada / Nomura Laboratory

[[https://travis-ci.org/nomlab/DTB][https://travis-ci.org/nomlab/DTB.svg?branch=master]]
[[https://codeclimate.com/github/nomlab/DTB][https://codeclimate.com/github/nomlab/DTB/badges/gpa.svg]]
[[https://gemnasium.com/nomlab/DTB][https://gemnasium.com/nomlab/DTB.svg]]
[[https://coveralls.io/github/nomlab/DTB?branch=master][https://coveralls.io/repos/github/nomlab/DTB/badge.svg?branch=master]]

* What is Desktop Bookmark (DTB)?
  Desktop Bookmark is a Rails application to collect your desktop
  activities grouping and connecting to TODO items.

* Setup Ruby Environment
  | Ruby  |   2.3.0 |
  | Rails | 4.2.5.1 |

  I recommend you to install new Ruby and Bundler on the top of Rbenv before install DTB.

  1) Install rbenv + ruby-build (check [[https://github.com/sstephenson/rbenv#basic-github-checkout][https://github.com/sstephenson/rbenv#basic-github-checkout]] for details)
     #+BEGIN_SRC sh
     $ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
     $ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
     # Edit your shell dot files to add some path and environment variables.
     #+END_SRC

  2) Install Ruby and Bundler
     #+BEGIN_SRC sh
     # Install ruby 2.3.0
     $ rbenv install 2.3.0

     # Installation check
     $ rbenv global 2.3.0
     $ ruby -v # -> You will see: ruby 2.3.0...

     # Install bundler for your new Ruby
     $ gem install bundler

     # Activate bundler
     $ rbenv rehash

     # Get back to your system default Ruby if you want
     $ rbenv global system # say, /usr/bin/ruby
     $ ruby -v
     #+END_SRC

* Install DTB
** Clone DTB
   1) clone DTB from github
      #+BEGIN_SRC sh
      $ git clone git@github.com:nomlab/DTB.git ~/Programs/DTB
      #+END_SRC

   2) Setup to use installed ruby
      #+BEGIN_SRC sh
      $ cd ~/Programs/DTB
      $ ruby -v # -> You will see: ruby 2.3.0...
      #+END_SRC

** Setup config files

   You can setup site-local config files interactively by invoking bin/install.sh:
   #+BEGIN_SRC sh
   $ bin/install.sh
   #+END_SRC

   Or, you can edit config files by hand:

   1) Install vendor/bundle stuffs
      #+BEGIN_SRC sh
      $ bundle install --path vendor/bundle
      #+END_SRC

   2) Setup secret key
      #+BEGIN_SRC sh
      $ bundle exec rake secret # -> You will see: foobarbuz... Copy the string.
      $ cp config/secrets.yml.template config/secrets.yml
      $ vim config/secrets.yml # -> Replace all <SECRETKEY> with the string outputted
      #+END_SRC

   3) Setup Toggl account if you have
      #+BEGIN_SRC sh
      $ cp config/application_settings.yml.template config/application_settings.yml
      $ vim config/application_settings.yml # -> Input your toggl token
      #+END_SRC

   4) Setup DB
      #+BEGIN_SRC sh
      $ bundle exec rake db:migrate
      $ bundle exec rake db:migrate RAILS_ENV=production
      #+END_SRC

   5) Initialize DB
      #+BEGIN_SRC sh
      $ bundle exec rake db:seed_fu
      $ bundle exec rake db:seed_fu RAILS_ENV=production
      #+END_SRC

   6) Install submodule
      #+BEGIN_SRC sh
      $ git submodule init
      $ git submodule update
      #+END_SRC

* Install clients recording history
** For Emacs Users

    1) Install [[https://github.com/okada-takuya/emacs-file-reference-recorder][emacs-file-reference-recorder]]

** For Firefox Users

    1) Install [[https://github.com/okada-takuya/TimeRecorder][TimeRecorder]]

* Launch DTB

** Launch DTB Rails app

*** development

    You can launch server by invoking bin/server.sh:

    #+BEGIN_SRC sh
    # start
    $ bin/server.sh start dev

    # stop
    $ bin/server.sh stop
    #+END_SRC

    Or, you can take these procedures by hand:

    #+BEGIN_SRC sh
    # start
    $ export RAILS_ENV="development"
    $ export RAILS_SERVE_STATIC_FILES=true
    $ bundle exec rails server -p 3000 -d -e "$RAILS_ENV"
    $ open http://localhost:3000

    # stop
    $ kill $(cat tmp/pids/server.pid)
    #+END_SRC

*** production

    You can launch server by invoking bin/server.sh:

    #+BEGIN_SRC sh
    # start
    $ bin/server.sh start pro

    # stop
    $ bin/server.sh stop
    #+END_SRC

    Or, you can take these procedures by hand:

    #+BEGIN_SRC sh
    # start
    $ export RAILS_ENV="production"
    $ export RAILS_SERVE_STATIC_FILES=true
    $ bundle exec rails server -p 3000 -d -e "$RAILS_ENV"
    $ bundle exec rake assets:precompile RAILS_ENV="$RAILS_ENV"
    $ bundle exec rake assets:precompile:image
    $ open http://localhost:3000

    # stop
    $ kill $(cat tmp/pids/server.pid)
    #+END_SRC

** Launch sub processes
   DTB gathers file-access records by Dtrace system-call on your Mac.
   It requires super-user privilege.

*** development

    #+BEGIN_SRC sh
    $ bundle exec rails runner lib/file_history_scripts/create_file_histories -e development
    #+END_SRC

*** production

    #+BEGIN_SRC sh
    $ bundle exec rails runner lib/file_history_scripts/create_file_histories -e production
    #+END_SRC
